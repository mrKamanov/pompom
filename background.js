/**
 * PomPom background.js ‚Äî –≤–µ—Ä—Å–∏—è 1.12
 * 
 * background.js - –§–æ–Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PomPom
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 * 2. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å AI API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
 * 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * 4. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
 * 5. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç API –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ chrome.storage
 * - –ó–∞—Ö–≤–∞—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
 * 
 * @author –°–µ—Ä–≥–µ–π –ö–∞–º–∞–Ω–æ–≤
 * @version 1.12
 */

import { sendAIMLAPIRequest } from './API/aimlapi.js';
import { sendToOpenRouter } from './API/openrouterapi.js';

async function createContextMenu() {
  const settings = await chrome.storage.sync.get([
    'prompt1Title', 'prompt2Title', 'prompt3Title'
  ]);
  const title1 = 'üü¢ ' + (settings.prompt1Title || '–ü—Ä–æ–º–ø—Ç 1');
  const title2 = 'üîµ ' + (settings.prompt2Title || '–ü—Ä–æ–º–ø—Ç 2');
  const title3 = 'üü£ ' + (settings.prompt3Title || '–ü—Ä–æ–º–ø—Ç 3');
  chrome.contextMenus.removeAll(() => {
    chrome.contextMenus.create({
      id: "processTextRoot",
      title: "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç",
      contexts: ["selection"]
    });
    chrome.contextMenus.create({
      id: "processText_prompt1",
      parentId: "processTextRoot",
      title: title1,
      contexts: ["selection"]
    });
    chrome.contextMenus.create({
      id: "processText_prompt2",
      parentId: "processTextRoot",
      title: title2,
      contexts: ["selection"]
    });
    chrome.contextMenus.create({
      id: "processText_prompt3",
      parentId: "processTextRoot",
      title: title3,
      contexts: ["selection"]
    });
    
    
    chrome.contextMenus.create({
      id: "captureSelectedArea",
      title: "–°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏",
      contexts: ["page"] 
    });
  });
}

chrome.runtime.onInstalled.addListener(createContextMenu);
chrome.runtime.onStartup.addListener(createContextMenu);
chrome.storage.onChanged.addListener((changes, area) => {
  if (area === 'sync' && (
    changes.prompt1Title || changes.prompt2Title || changes.prompt3Title
  )) {
    createContextMenu();
  }
});

async function sendMessageToTab(tab, message) {
  try {
    await chrome.tabs.sendMessage(tab.id, message);
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    
    await chrome.scripting.executeScript({
      target: { tabId: tab.id },
      files: ['content.js']
    });
    
    await chrome.tabs.sendMessage(tab.id, message);
  }
}


async function getSelectedText(tab) {
  try {
    
    return new Promise((resolve) => {
      chrome.tabs.sendMessage(tab.id, { action: "getSelectedText" }, (response) => {
        if (chrome.runtime.lastError) {
          console.error('Error getting selected text:', chrome.runtime.lastError);
          
          chrome.scripting.executeScript({
            target: { tabId: tab.id },
            func: () => {
              const selection = window.getSelection();
              console.log('Selection object:', selection);
              const text = selection.toString();
              console.log('Selected text:', text);
              return text;
            }
          }, (results) => {
            if (chrome.runtime.lastError) {
              console.error('Fallback error getting selected text:', chrome.runtime.lastError);
              resolve('');
            } else {
              console.log('Results from executeScript:', results);
              resolve(results[0].result);
            }
          });
        } else {
          console.log('Selected text from content script:', response);
          resolve(response.text || '');
        }
      });
    });
  } catch (error) {
    console.error('Error getting selected text:', error);
    return '';
  }
}


chrome.contextMenus.onClicked.addListener(async (info, tab) => {
  if (info.menuItemId.startsWith("processText_prompt")) {
    try {
      console.log('Menu clicked, info:', info);
      console.log('Current tab:', tab);
      console.log('Selection text from info:', info.selectionText);
      
      
      let selectedText = info.selectionText || '';
      console.log('Text from info.selectionText:', selectedText);
      
      
      if (!selectedText || selectedText.trim() === '') {
        console.log('Getting text via getSelectedText function...');
        selectedText = await getSelectedText(tab);
        console.log('Text from getSelectedText:', selectedText);
      }
      
      console.log('Final selected text:', selectedText);
      if (!selectedText || selectedText.trim() === '') {
        await sendMessageToTab(tab, {
          action: "showResult",
          result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."
        });
        return;
      }
      const settings = await chrome.storage.sync.get([
        'prompt1', 'prompt2', 'prompt3', 'apiKey', 'aimlapi_model', 'api_provider', 'openrouter_apiKey', 'openrouter_model']);
      if (!settings.apiKey) {
        await sendMessageToTab(tab, {
          action: "showResult",
          result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."
        });
        return;
      }
      let prompt = '';
      if (info.menuItemId === 'processText_prompt1') {
        prompt = settings.prompt1 || '';
      } else if (info.menuItemId === 'processText_prompt2') {
        prompt = settings.prompt2 || '';
      } else if (info.menuItemId === 'processText_prompt3') {
        prompt = settings.prompt3 || '';
      }
      if (!prompt) {
        await sendMessageToTab(tab, {
          action: "showResult",
          result: "–ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        });
        return;
      }
      let result = '';
      if (settings.api_provider === 'openrouter') {
        result = await sendToOpenRouter(selectedText, settings.openrouter_apiKey, { model: settings.openrouter_model });
      } else {
        result = await sendAIMLAPIRequest(tab, prompt, selectedText, settings.apiKey, settings.aimlapi_model);
      }
      await sendMessageToTab(tab, {
        action: "showResult",
        result: result
      });
    } catch (error) {
      console.error('Error:', error);
      await sendMessageToTab(tab, {
        action: "showResult",
        result: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`
      });
    }
  } else if (info.menuItemId === "captureSelectedArea") {
    
    try {
      
      await chrome.tabs.sendMessage(tab.id, { action: "startSelection" });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏:', error);
    }
  }
});


chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === "areaSelected") {
        handleAreaSelected(message, sender, sendResponse);
        return true;
    }
    if (message.action === 'chatMessage') {
        handleChatMessage(message, sender, sendResponse);
        return true;
    }
    if (message.action === 'recognizeText') {
        handleRecognizeText(message, sender, sendResponse);
        return true;
    }
    if (message.action === 'processRecognizedText') {
        handleProcessRecognizedText(message, sender, sendResponse);
        return true;
    }
    if (message.action === "screenshot") {
        handleScreenshot(message, sender, sendResponse);
        return true;
    }
});

async function handleAreaSelected(message, sender, sendResponse) {
    console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ areaSelected:", message);
    const { x, y, width, height } = message.rect;
    const tabId = sender.tab.id;

    
    chrome.tabs.sendMessage(tabId, { action: "hideOverlay" });

    
    setTimeout(() => {
        
        chrome.tabs.captureVisibleTab(sender.tab.windowId, { format: "png" }, async (dataUrl) => {
            if (chrome.runtime.lastError) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∫–ª–∞–¥–∫–∏:", chrome.runtime.lastError.message);
                sendResponse({ success: false, error: chrome.runtime.lastError.message });
                return;
            }

            console.log("–°–∫—Ä–∏–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω, —Ä–∞–∑–º–µ—Ä dataUrl:", dataUrl ? dataUrl.length : 0);

            try {
                const response = await fetch(dataUrl);
                const blob = await response.blob();
                const imageBitmap = await createImageBitmap(blob);
                
                console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä—ã:", imageBitmap.width, "x", imageBitmap.height);
                
                const canvas = new OffscreenCanvas(width, height);
                const ctx = canvas.getContext('2d');
                
                const scale = imageBitmap.width / sender.tab.width;
                console.log("–ú–∞—Å—à—Ç–∞–±:", scale, "–®–∏—Ä–∏–Ω–∞ –≤–∫–ª–∞–¥–∫–∏:", sender.tab.width);
                
                const scaledWidth = width * scale;
                const scaledHeight = height * scale;
                console.log("–†–∞–∑–º–µ—Ä—ã canvas –¥–ª—è –æ–±—Ä–µ–∑–∫–∏:", scaledWidth, "x", scaledHeight);
                
                ctx.drawImage(imageBitmap, x * scale, y * scale, scaledWidth, scaledHeight, 0, 0, width, height);
                
                const croppedBlob = await canvas.convertToBlob({ type: 'image/png' });
                const croppedDataUrl = await blobToDataURL(croppedBlob);
                
                console.log("–û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ");
                
                chrome.downloads.download({
                    url: croppedDataUrl,
                    filename: `screenshot_area_${Date.now()}.png`,
                    saveAs: true
                }, (downloadId) => {
                    if (chrome.runtime.lastError) {
                        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", chrome.runtime.lastError.message);
                        sendResponse({ success: false, error: chrome.runtime.lastError.message });
                    } else {
                        console.log("–°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, ID –∑–∞–≥—Ä—É–∑–∫–∏:", downloadId);
                        sendResponse({ success: true });
                    }
                });
                
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
                sendResponse({ success: false, error: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + error.message });
            }
        });
    }, 100);
}


function blobToDataURL(blob) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
    });
}

async function handleRecognizeText(message, sender, sendResponse) {
    console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ recognizeText:", message);
    
    
    if (!message.rect || !message.rect.width || !message.rect.height) {
        sendResponse({ success: false, error: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã" });
        return;
    }
    
    const { x, y, width, height } = message.rect;
    const tabId = sender.tab.id;

    
    chrome.tabs.sendMessage(tabId, { action: "hideOverlay" });

    setTimeout(() => {
        
        chrome.tabs.captureVisibleTab(sender.tab.windowId, { format: "png" }, async (dataUrl) => {
            if (chrome.runtime.lastError) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∫–ª–∞–¥–∫–∏:", chrome.runtime.lastError.message);
                sendResponse({ success: false, error: chrome.runtime.lastError.message });
                return;
            }

            console.log("–°–∫—Ä–∏–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω, —Ä–∞–∑–º–µ—Ä dataUrl:", dataUrl ? dataUrl.length : 0);

            try {
                const response = await fetch(dataUrl);
                const blob = await response.blob();
                const imageBitmap = await createImageBitmap(blob);
                
                console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä—ã:", imageBitmap.width, "x", imageBitmap.height);
                
                const canvas = new OffscreenCanvas(width, height);
                const ctx = canvas.getContext('2d');
                
                const scale = imageBitmap.width / sender.tab.width;
                console.log("–ú–∞—Å—à—Ç–∞–±:", scale, "–®–∏—Ä–∏–Ω–∞ –≤–∫–ª–∞–¥–∫–∏:", sender.tab.width);
                
                const scaledWidth = width * scale;
                const scaledHeight = height * scale;
                console.log("–†–∞–∑–º–µ—Ä—ã canvas –¥–ª—è –æ–±—Ä–µ–∑–∫–∏:", scaledWidth, "x", scaledHeight);
                
                ctx.drawImage(imageBitmap, x * scale, y * scale, scaledWidth, scaledHeight, 0, 0, width, height);
                
                const croppedBlob = await canvas.convertToBlob({ type: 'image/png' });
                const croppedDataUrl = await blobToDataURL(croppedBlob);
                
                console.log("–û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è");
                
                
                sendResponse({ success: true, dataUrl: croppedDataUrl });
                
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
                sendResponse({ success: false, error: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + error.message });
            }
        });
    }, 100);
}

async function handleScreenshot(message, sender, sendResponse) {
    
    chrome.tabs.captureVisibleTab(sender.tab.windowId, { format: "png" }, (dataUrl) => {
        if (chrome.runtime.lastError) {
            sendResponse({ success: false, error: chrome.runtime.lastError.message });
            return;
        }
        
        sendResponse({ success: true, dataUrl: dataUrl });
    });
}

async function handleProcessRecognizedText(message, sender, sendResponse) {
    try {
        console.log("–ü–æ–ª—É—á–µ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", message.text);
        
        const settings = await chrome.storage.sync.get([
            'prompt', 'apiKey', 'aimlapi_model', 'api_provider', 
            'openrouter_apiKey', 'openrouter_model'
        ]);
        
        if (!settings.apiKey) {
            sendResponse({ 
                success: false, 
                error: 'API Key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è' 
            });
            return;
        }
        
        const prompt = settings.prompt || "–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥, —Ç–æ –∏—Å–ø—Ä–∞–≤—å –≤ –Ω–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –ø–æ–∫–∞–∂–∏ —Ü–µ–ª–∏–∫–æ–º. –ï—Å–ª–∏ –≤ –∫–æ–¥–µ –ø—Ä–æ–ø—É—Å–∫–∏, —Ç–æ –¥–æ–ø–æ–ª–Ω–∏ –µ–≥–æ.";
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ API —Å –ø—Ä–æ–º–ø—Ç–æ–º:', prompt);
        
        let result = '';
        if (settings.api_provider === 'openrouter') {
            result = await sendToOpenRouter(message.text, settings.openrouter_apiKey, { 
                model: settings.openrouter_model,
                prompt: prompt
            });
        } else {
            result = await sendAIMLAPIRequest(sender.tab, prompt, message.text, settings.apiKey, settings.aimlapi_model);
        }
        
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', result);
        sendResponse({ success: true, result: result });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', error);
        sendResponse({ 
            success: false, 
            error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}` 
        });
    }
}

async function handleChatMessage(message, sender, sendResponse) {
    try {
        const settings = await chrome.storage.sync.get(['prompt', 'apiKey', 'aimlapi_model', 'api_provider', 'openrouter_apiKey', 'openrouter_model']);
        
        if (!settings.apiKey) {
            await sendMessageToTab(sender.tab, { action: "chatResponse", result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API Key." });
            sendResponse({ success: false, error: 'API Key not set' });
            return;
        }

        const system_prompt = settings.prompt || "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–¥–æ–º. –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.";
        
        
        const history = message.history || [];

        const messages_to_send = [
            { role: "system", content: system_prompt },
            ...history
            
        ];

        console.log("–°–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤ API:", messages_to_send);

        let result = '';
        if (settings.api_provider === 'openrouter') {
            result = await sendToOpenRouter(messages_to_send, settings.openrouter_apiKey, { model: settings.openrouter_model });
        } else {
            const last_user_message = history.find(m => m.role === 'user').content || '';
            const initial_context = history.find(m => m.role === 'assistant').content || '';
            const full_prompt = initial_context + "\n\n" + last_user_message;
            result = await sendAIMLAPIRequest(sender.tab, system_prompt, full_prompt, settings.apiKey, settings.aimlapi_model);
        }

        await sendMessageToTab(sender.tab, { action: "chatResponse", result: result });
        sendResponse({ success: true });
    } catch (error) {
        console.error('Error in handleChatMessage:', error);
        await sendMessageToTab(sender.tab, { action: "chatResponse", result: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`});
        sendResponse({ success: false, error: error.message });
    }
}


chrome.tabs.onRemoved.addListener((tabId, removeInfo) => {
    console.log('–í–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, tabId:', tabId);
    
});


chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
    if (changeInfo.status === 'loading') {
        console.log('–í–∫–ª–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, tabId:', tabId);
        
    }
});

async function processSelectedTextWithPrompt(tab, promptIndex) {
  const selectedText = await getSelectedText(tab);
  if (!selectedText || selectedText.trim() === '') {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏."
    });
    return;
  }
  const settings = await chrome.storage.sync.get([
    'prompt1', 'prompt2', 'prompt3', 'apiKey', 'aimlapi_model', 'api_provider', 'openrouter_apiKey', 'openrouter_model'
  ]);
  if (!settings.apiKey) {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."
    });
    return;
  }
  let prompt = '';
  if (promptIndex === 1) prompt = settings.prompt1 || '';
  else if (promptIndex === 2) prompt = settings.prompt2 || '';
  else if (promptIndex === 3) prompt = settings.prompt3 || '';
  
  if (!prompt) {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: "–ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
    });
    return;
  }
  
  try {
    let result = '';
    if (settings.api_provider === 'openrouter') {
      
      const messages = [{ role: "system", content: prompt }, { role: "user", content: selectedText }];
      result = await sendToOpenRouter(messages, settings.openrouter_apiKey, { model: settings.openrouter_model });
    } else {
      result = await sendAIMLAPIRequest(tab, prompt, selectedText, settings.apiKey, settings.aimlapi_model);
    }
    await sendMessageToTab(tab, {
      action: "showResult",
      result: result
    });
  } catch (error) {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`
    });
  }
}

chrome.commands.onCommand.addListener(async (command, tab) => {
  if (!tab || !tab.id) return;
  
  console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏: ${command}`);

  if (command.startsWith('prompt')) {
      const promptIndex = parseInt(command.replace('prompt', ''));
      await processSelectedTextWithPrompt(tab, promptIndex);
  } else if (command === 'print_shortcut') {
    await sendMessageToTab(tab, { action: 'startAutoPrint' });
  }
});