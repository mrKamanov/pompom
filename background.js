/**
 * background.js - –§–æ–Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PomPom
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 * 2. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å AI API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
 * 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * 4. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç API –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ chrome.storage
 * 
 * @author –°–µ—Ä–≥–µ–π –ö–∞–º–∞–Ω–æ–≤
 * @version 1.0
 */

async function createContextMenu() {
  const settings = await chrome.storage.sync.get([
    'prompt1Title', 'prompt2Title', 'prompt3Title'
  ]);
  const title1 = 'üü¢ ' + (settings.prompt1Title || '–ü—Ä–æ–º–ø—Ç 1');
  const title2 = 'üîµ ' + (settings.prompt2Title || '–ü—Ä–æ–º–ø—Ç 2');
  const title3 = 'üü£ ' + (settings.prompt3Title || '–ü—Ä–æ–º–ø—Ç 3');
  chrome.contextMenus.removeAll(() => {
    chrome.contextMenus.create({
      id: "processTextRoot",
      title: "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç",
      contexts: ["selection"]
    });
    chrome.contextMenus.create({
      id: "processText_prompt1",
      parentId: "processTextRoot",
      title: title1,
      contexts: ["selection"]
    });
    chrome.contextMenus.create({
      id: "processText_prompt2",
      parentId: "processTextRoot",
      title: title2,
      contexts: ["selection"]
    });
    chrome.contextMenus.create({
      id: "processText_prompt3",
      parentId: "processTextRoot",
      title: title3,
      contexts: ["selection"]
    });
  });
}

chrome.runtime.onInstalled.addListener(createContextMenu);
chrome.runtime.onStartup.addListener(createContextMenu);
chrome.storage.onChanged.addListener((changes, area) => {
  if (area === 'sync' && (
    changes.prompt1Title || changes.prompt2Title || changes.prompt3Title
  )) {
    createContextMenu();
  }
});

async function sendMessageToTab(tab, message) {
  try {
    await chrome.tabs.sendMessage(tab.id, message);
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    
    await chrome.scripting.executeScript({
      target: { tabId: tab.id },
      files: ['content.js']
    });
    
    await chrome.tabs.sendMessage(tab.id, message);
  }
}


async function getSelectedText(tab) {
  try {
    const results = await chrome.scripting.executeScript({
      target: { tabId: tab.id },
      func: () => {
        const selection = window.getSelection();
        console.log('Selection object:', selection);
        const text = selection.toString();
        console.log('Selected text:', text);
        return text;
      }
    });
    console.log('Results from executeScript:', results);
    return results[0].result;
  } catch (error) {
    console.error('Error getting selected text:', error);
    return '';
  }
}


chrome.contextMenus.onClicked.addListener(async (info, tab) => {
  if (info.menuItemId.startsWith("processText_prompt")) {
    try {
      console.log('Menu clicked, info:', info);
      console.log('Current tab:', tab);
      const selectedText = await getSelectedText(tab);
      console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', selectedText);
      if (!selectedText || selectedText.trim() === '') {
        console.log('–¢–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π');
        await sendMessageToTab(tab, {
          action: "showResult",
          result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."
        });
        return;
      }
      const settings = await chrome.storage.sync.get(['prompt1', 'prompt2', 'prompt3', 'apiKey']);
      if (!settings.apiKey) {
        await sendMessageToTab(tab, {
          action: "showResult",
          result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."
        });
        return;
      }
      let prompt = '';
      if (info.menuItemId === 'processText_prompt1') {
        prompt = settings.prompt1 || '';
      } else if (info.menuItemId === 'processText_prompt2') {
        prompt = settings.prompt2 || '';
      } else if (info.menuItemId === 'processText_prompt3') {
        prompt = settings.prompt3 || '';
      }
      if (!prompt) {
        await sendMessageToTab(tab, {
          action: "showResult",
          result: "–ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        });
        return;
      }
      const combinedText = `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${prompt}\n\n–ó–∞–¥–∞—á–∞: ${selectedText}`;
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç:', combinedText);
      const requestBody = {
        model: "google/gemma-3-27b-it",
        messages: [
          {
            role: "user",
            content: combinedText
          }
        ],
        temperature: 0.7,
        top_p: 0.7,
        frequency_penalty: 1,
        max_output_tokens: 512,
        top_k: 50
      };
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∑–∞–ø—Ä–æ—Å:', JSON.stringify(requestBody, null, 2));
      const response = await fetch('https://api.aimlapi.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${settings.apiKey}`
        },
        body: JSON.stringify(requestBody)
      });
      console.log('Response status:', response.status);
      console.log('Response headers:', Object.fromEntries(response.headers.entries()));
      const responseText = await response.text();
      console.log('Raw response:', responseText);
      let data;
      try {
        data = JSON.parse(responseText);
        console.log('Parsed response:', JSON.stringify(data, null, 2));
      } catch (e) {
        console.error('Error parsing response:', e);
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: ${e.message}`);
      }
      if (response.status !== 200 && response.status !== 201) {
        const errorMessage = data.error?.message || data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        console.error('API Error:', errorMessage);
        throw new Error(`API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorMessage}`);
      }
      if (!data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
        console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', data);
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: ${JSON.stringify(data)}`);
      }
      const result = data.choices[0].message?.content;
      if (!result) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: ${JSON.stringify(data)}`);
      }
      await sendMessageToTab(tab, {
        action: "showResult",
        result: result
      });
    } catch (error) {
      console.error('Error:', error);
      await sendMessageToTab(tab, {
        action: "showResult",
        result: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`
      });
    }
  }
});


chrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {
    if (message.action === 'chatMessage') {
        try {
            const settings = await chrome.storage.sync.get(['prompt', 'apiKey']);
            
            if (!settings.apiKey) {
                await sendMessageToTab(sender.tab, {
                    action: "chatResponse",
                    result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."
                });
                return;
            }

            const prompt = settings.prompt || "–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥, —Ç–æ –∏—Å–ø—Ä–∞–≤—å –≤ –Ω–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –ø–æ–∫–∞–∂–∏ —Ü–µ–ª–∏–∫–æ–º. –ï—Å–ª–∏ –≤ –∫–æ–¥–µ –ø—Ä–æ–ø—É—Å–∫–∏, —Ç–æ –¥–æ–ø–æ–ª–Ω–∏ –µ–≥–æ.";
            
            
            const messages = [
                {
                    role: "system",
                    content: prompt
                },
                ...message.history,
                {
                    role: "user",
                    content: message.message
                }
            ];

            const requestBody = {
                model: "google/gemma-3-27b-it",
                messages: messages,
                temperature: 0.7,
                top_p: 0.7,
                frequency_penalty: 1,
                max_output_tokens: 512,
                top_k: 50
            };

            const response = await fetch('https://api.aimlapi.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${settings.apiKey}`
                },
                body: JSON.stringify(requestBody)
            });

            const data = await response.json();

            if (response.status !== 200 && response.status !== 201) {
                const errorMessage = data.error?.message || data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                throw new Error(`API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorMessage}`);
            }

            if (!data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
                throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: ${JSON.stringify(data)}`);
            }

            const result = data.choices[0].message?.content;
            if (!result) {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: ${JSON.stringify(data)}`);
            }

            await sendMessageToTab(sender.tab, {
                action: "chatResponse",
                result: result
            });
        } catch (error) {
            console.error('Error:', error);
            await sendMessageToTab(sender.tab, {
                action: "chatResponse",
                result: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`
            });
        }
    }
});

async function processSelectedTextWithPrompt(tab, promptIndex) {
  const selectedText = await getSelectedText(tab);
  if (!selectedText || selectedText.trim() === '') {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏."
    });
    return;
  }
  const settings = await chrome.storage.sync.get([
    'prompt1', 'prompt2', 'prompt3', 'apiKey'
  ]);
  if (!settings.apiKey) {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."
    });
    return;
  }
  let prompt = '';
  if (promptIndex === 1) prompt = settings.prompt1 || '';
  if (promptIndex === 2) prompt = settings.prompt2 || '';
  if (promptIndex === 3) prompt = settings.prompt3 || '';
  if (!prompt) {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: "–ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
    });
    return;
  }
  const combinedText = `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${prompt}\n\n–ó–∞–¥–∞—á–∞: ${selectedText}`;
  const requestBody = {
    model: "google/gemma-3-27b-it",
    messages: [
      {
        role: "user",
        content: combinedText
      }
    ],
    temperature: 0.7,
    top_p: 0.7,
    frequency_penalty: 1,
    max_output_tokens: 512,
    top_k: 50
  };
  const response = await fetch('https://api.aimlapi.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${settings.apiKey}`
    },
    body: JSON.stringify(requestBody)
  });
  const responseText = await response.text();
  let data;
  try {
    data = JSON.parse(responseText);
  } catch (e) {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: ${e.message}`
    });
    return;
  }
  if (response.status !== 200 && response.status !== 201) {
    const errorMessage = data.error?.message || data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    await sendMessageToTab(tab, {
      action: "showResult",
      result: `API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorMessage}`
    });
    return;
  }
  if (!data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: ${JSON.stringify(data)}`
    });
    return;
  }
  const result = data.choices[0].message?.content;
  if (!result) {
    await sendMessageToTab(tab, {
      action: "showResult",
      result: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: ${JSON.stringify(data)}`
    });
    return;
  }
  await sendMessageToTab(tab, {
    action: "showResult",
    result: result
  });
}

chrome.commands.onCommand.addListener(async (command, tab) => {
  if (!tab || !tab.id) return;
  if (command === 'prompt1_shortcut') {
    await processSelectedTextWithPrompt(tab, 1);
  } else if (command === 'prompt2_shortcut') {
    await processSelectedTextWithPrompt(tab, 2);
  } else if (command === 'prompt3_shortcut') {
    await processSelectedTextWithPrompt(tab, 3);
  } else if (command === 'print_shortcut') {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–≤—Ç–æ–ø–µ—á–∞—Ç–∏ –≤ content.js
    await chrome.tabs.sendMessage(tab.id, { action: 'startAutoPrint' });
  }
}); 